import datetime
import logging
import time

from requests_html import HTMLSession

from espn.baseball.baseball_stat import BaseballStat
from stats import Stats

LOGGER = logging.getLogger("fangraphs.api")


class FangraphsApi:
    """
    Not useful anymore - they removed this page. 04-09-2022
    """
    @staticmethod
    def hitter_projections():
        """
        Scrapes Fangraphs for today's projected stats for hitters
        :return: dictionary mapping hitter name to a Stats object
        """
        session = HTMLSession()
        start_time = time.time()
        LOGGER.info("retrieving hitting projections from Fangraphs")
        r = session.post(
            "https://www.fangraphs.com/dailyprojections.aspx"
            "?pos=all"
            "&stats=bat"
            "&type=sabersim"
            "&team=0"
            "&lg=all"
            "&players=0",
            data={
                "__EVENTTARGET": "DFSBoard1$dg1",
                "__EVENTARGUMENT": "FireCommand:DFSBoard1$dg1$ctl00;PageSize;1000",
                # pylint: disable=line-too-long
                "__VIEWSTATE": "",
            },
        )
        end_time = time.time()
        LOGGER.info(
            "projections retrieved in %(time).3fs", {"time": end_time - start_time}
        )
        # need event target, event argument and viewstate... :(

        table = r.html.find("#DFSBoard1_dg1_ctl00", first=True)
        body = table.find("tbody", first=True)
        tr = body.find("tr")

        projections = {}
        for row in tr:
            cells = row.find("td")
            proj = FangraphsApi.row_to_hitter_projections(cells)
            name = cells[0].text
            # if there's a doubleheader, we want to sum the stats
            cur_stats = projections.get(name, Stats({}, BaseballStat))
            projections[name] = proj + cur_stats

        return projections

    @staticmethod
    def row_to_hitter_projections(row):
        pa = float(row[4].text)
        h = float(row[5].text)
        hr = float(row[9].text)
        r = float(row[10].text)
        rbi = float(row[11].text)
        sb = float(row[12].text)
        bb = float(row[14].text)
        if pa < 0.05:
            return Stats({}, BaseballStat)

        return FangraphsApi.hitter_stats(pa, h, hr, r, rbi, sb, bb)

    @staticmethod
    def hitter_stats(pa, h, hr, r, rbi, sb, bb):
        ab = pa - bb
        stats_dict = {
            BaseballStat.AB: ab,
            BaseballStat.H: h,
            BaseballStat.AVG: h / ab,
            BaseballStat.HR: hr,
            BaseballStat.BB: bb,
            BaseballStat.PA: pa,
            BaseballStat.OBP: (h + bb) / pa,
            BaseballStat.R: r,
            BaseballStat.RBI: rbi,
            BaseballStat.SB: sb,
        }
        return Stats(stats_dict, BaseballStat)

    @staticmethod
    def pitcher_projections():
        """
        Scrapes Fangraphs for today's projected stats for pitchers
        :return: dictionary mapping Pitcher name to a Stats object
        """
        session = HTMLSession()
        r = session.get(
            "https://www.fangraphs.com/dailyprojections.aspx"
            "?pos=all"
            "&stats=pit"
            "&type=sabersim"
            "&team=0"
            "&lg=all"
            "&players=0"
        )

        table = r.html.find("#DFSBoard1_dg1_ctl00", first=True)
        body = table.find("tbody", first=True)
        tr = body.find("tr")

        projections = {}
        for row in tr:
            cells = row.find("td")
            proj = FangraphsApi.row_to_pitcher_projections(cells)
            name = cells[0].text
            projections[name] = proj

        return projections

    @staticmethod
    def row_to_pitcher_projections(row):
        wins = float(row[3].text)
        ip = float(row[4].text)
        hits = float(row[6].text)
        hr = float(row[10].text)
        walks = float(row[11].text)
        strikeouts = float(row[12].text)
        return FangraphsApi.pitcher_stats(wins, ip, hits, hr, walks, strikeouts)

    @staticmethod
    def pitcher_stats(wins, innings, hits, homers, walks, strikeouts):
        # component era calculation from Bill James https://en.wikipedia.org/wiki/Component_ERA
        # pitcher_total_bases = 0.89 * (1.255 * (hits - homers) + 4 * homers) + 0.475 * walks
        # unadjusted_comp_era = 9 * ((hits + walks) * pitcher_total_bases) / (batters * innings)
        # component_era = unadjusted_comp_era - 0.56
        # if component_era < 2.24:
        #     component_era = unadjusted_comp_era * 0.75
        component_era = 3.00 + (13 * homers + 3 * walks - 2 * strikeouts) / innings

        stats_dict = {
            BaseballStat.OUTS: innings * 3,
            BaseballStat.P_H: hits,
            BaseballStat.P_BB: walks,
            BaseballStat.WHIP: (walks + hits) / innings,
            BaseballStat.ERA: component_era,
            BaseballStat.P_HR: homers,
            BaseballStat.K: strikeouts,
            BaseballStat.W: wins,
        }
        return Stats(stats_dict, BaseballStat)

    @staticmethod
    def last_updated():
        """
        Returns a datetime object representing the last time that the Fangraphs projections
        were updated.
        :return datetime: the datetime that the projections changed
        """
        session = HTMLSession()
        LOGGER.info("fetching page to check for last updated")
        start = time.time()
        r = session.get("https://www.fangraphs.com/dailyprojections.aspx")
        end = time.time()
        LOGGER.info("finished in %(time).3fs seconds", {"time": end - start})
        date_string = r.html.search("Updated: {} ET")[0]
        return datetime.datetime.strptime(date_string, "%A, %B %d, %Y %I:%M %p")
